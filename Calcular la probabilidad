{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "77fd6eed-696f-4ea0-98d5-c507ad04f951",
   "metadata": {},
   "source": [
    "#Probabilidad Laplaciana (clasica)\n",
    "Para un experimento aleatorio, se tiene que $\\Omega$ es el espacio muestral.\n",
    "\n",
    "Sea $A$ un evento, entonces\n",
    "\n",
    "$$ \\mathbb{P} (A) = \\frac{\\#A}{\\#\\Omega} $$\n",
    "\n",
    "**Ejemplo** Sea el experimento de lanzar una moneda 3 veces de manera inpendiente (es decir ek $i$-esimo lanzamiento no me afecta al $i+1$\n",
    "lanzamineto) . El espacio muestral de este experimento es:\n",
    "\n",
    "$$ \\Omega = \\{A,S\\} \\times \\{A,S\\} \\times \\{A,S\\} = \\{A,S\\}^3$$\n",
    "\n",
    "y tenemos que $\\#\\Omega = 2^3$.\n",
    "Sean los eventros:\n",
    "* $A$: Todos los resultados son águila\n",
    "* $S$: Todos los resultados son soles\n",
    "* $E$: Por lo menos un resultado es sol\n",
    "\n",
    "\n",
    "***Solucion*** Vamos a descomponer mi conjunto $A$ de la siguiente manera:\n",
    "$$A = A_1 \\cap A_2\\cap A_3 $$\n",
    "donde el evento $A_1$: Caé aguila en el $i$-esimo resultado."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "733e3e98-7cae-4234-b6f5-e8ee03ae21a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'A', 'A'),\n",
       " ('A', 'A', 'S'),\n",
       " ('A', 'S', 'A'),\n",
       " ('A', 'S', 'S'),\n",
       " ('S', 'A', 'A'),\n",
       " ('S', 'A', 'S'),\n",
       " ('S', 'S', 'A'),\n",
       " ('S', 'S', 'S')}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import itertools #importamos el modulo\n",
    "from itertools import product\n",
    "\n",
    "Omega = set(product({'A','S'},repeat=3))\n",
    "Omega"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5a8cda8b-8297-4d47-a310-f32f63e29149",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "card = len(Omega)\n",
    "card"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "51eebd62-b4e7-4631-9597-4cf6040cd7fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'A', 'A'), ('A', 'A', 'S'), ('A', 'S', 'A'), ('A', 'S', 'S')}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento A_1\n",
    "A_1 = {om for om in Omega if om[0]=='A'} # La primera coordenada es águila\n",
    "A_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "99b3cb73-f13b-41e6-978f-e1053db79505",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'A', 'A'), ('A', 'A', 'S'), ('S', 'A', 'A'), ('S', 'A', 'S')}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento A_2\n",
    "A_2 = {om for om in Omega if om[1]=='A'} # La segunda coordenada es águila\n",
    "A_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ec034481-ffe1-429b-91ee-58f6f7022815",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'A', 'A'), ('A', 'S', 'A'), ('S', 'A', 'A'), ('S', 'S', 'A')}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento A_3\n",
    "A_3 = {om for om in Omega if om[2]=='A'} # La tercera coordenada es águila\n",
    "A_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "791b55e3-8dab-403b-985a-33f3653d033c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'A', 'A')}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento A\n",
    "A= A_1.intersection(A_2.intersection(A_3))\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c0aa4dd6-2ffe-4982-9f6c-8eec0d4b31ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d17c38d4-c24a-4de2-ac10-616103c731d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.125"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a calcular la probabilidad de A\n",
    "\n",
    "P_A = len(A)/len(Omega)\n",
    "P_A"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b106dd0-ea13-44d0-aa32-1603bb19b6ac",
   "metadata": {},
   "source": [
    "Yo quiero expresar mi resulatado en fracción, esto se hace de la siguiente manera:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "feb44da0-7f64-4062-957d-d0d5b8d4df46",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fractions import Fraction\n",
    "\n",
    "def p(E,Omega):\n",
    "    p=Fraction(len(E),len(Omega))\n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f4c4d595-3ce5-4c5b-a84f-13a40fda50bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fraction(1, 8)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prob = p(A,Omega)\n",
    "prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "839991db-b616-4dd6-a6db-5dc18cc3a7ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('S', 'A', 'A'), ('S', 'A', 'S'), ('S', 'S', 'A'), ('S', 'S', 'S')}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento S_1\n",
    "S_1 = {om for om in Omega if om[0]=='S'} # La primera coordenada es Sol\n",
    "S_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2dca3b17-5aeb-4e37-9f3c-050ffbb0292e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'S', 'A'), ('A', 'S', 'S'), ('S', 'S', 'A'), ('S', 'S', 'S')}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento S_2\n",
    "S_2 = {om for om in Omega if om[1]=='S'} # La segunda coordenada es Sol\n",
    "S_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c6e6a9c2-5e87-4cfe-8f9c-2a3a8407558a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'A', 'S'), ('A', 'S', 'S'), ('S', 'A', 'S'), ('S', 'S', 'S')}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento S_3 \n",
    "S_3 = {om for om in Omega if om[2]=='S'} # La tercera coordenada es Sol\n",
    "S_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "36c5a428-0ba9-400e-b21d-93849bd2b94b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('S', 'S', 'S')}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento S\n",
    "S= S_1.intersection(S_2.intersection(S_3))\n",
    "S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "aad34e45-6d9d-48ba-8554-b3bceb39a9ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(S)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "02a5e5c3-321e-42c6-9580-875d5a138a09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.125"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a calcular la probabilidad de S\n",
    "\n",
    "P_S = len(A)/len(Omega)\n",
    "P_S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7d300fdc-150d-4ada-8b75-bd40835cb714",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('A', 'A', 'S'),\n",
       " ('A', 'S', 'A'),\n",
       " ('A', 'S', 'S'),\n",
       " ('S', 'A', 'A'),\n",
       " ('S', 'A', 'S'),\n",
       " ('S', 'S', 'A'),\n",
       " ('S', 'S', 'S')}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vamos a crear el evento E\n",
    "E = {om for om in Omega if om[0]=='S' or om[1]=='S' or om[2]=='S'} # Alguna coordenada es Sol\n",
    "E"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6fd169d2-1697-488a-86a9-b1e0f4576394",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(E)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "aa7057cb-7489-42d8-821e-9803841f748a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.875"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P_E = len(E)/len(Omega)\n",
    "P_E"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f6f897fa-b8ac-4c9e-89a6-6413d0183fff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.125"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P_total =(P_A)+(P_S)+(P_E) #Porque en el evento S se considera Sol también\n",
    "P_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8129e425-70bd-4fe4-815d-990c36ca7dd1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
